
#Использовать fs
#Использовать strings

#Область ОписаниеПеременных

Перем Лог;                      // Объект записи лога приложения
Перем КаталогШаблонов;          // Строка - каталог с шаблонами pipeline
Перем КаталогСборки;            // Строка - каталог сборки
Перем ФактИсполненияПайплайн;   // Переменные среды (CI_PIPELINE_SOURCE, CI_COMMIT_TAG etc)
Перем ТаблицаНастройкиШагов;    // Таблица с настройками для формирования шагов pipeline

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Добавить опции и аргументы для команды
//
// Параметры:
//  ПараметрыКоманды  - Структура - Соответствие ключей командной строки и их значений
//
Процедура ОписаниеКоманды(ПараметрыКоманды) Экспорт

	ВыходнойФайл = ОбъединитьПути(КаталогСборки, "generate-config.yml");
	ПараметрыКоманды.Опция("p path", "", "путь к сохранению сформированного сценария pipeline")
					.ТСтрока()
					.ВОкружении("VCI_PATH_GENERATE_PIPELINE")
					.ПоУмолчанию(ВыходнойФайл);

КонецПроцедуры

// Выполняет логику команды
//
// Параметры:
//  ПараметрыКоманды  - Структура - Соответствие ключей командной строки и их значений
//
Процедура ВыполнитьКоманду(Знач ПараметрыКоманды) Экспорт

	Лог = ПараметрыПриложения.Лог();
	Лог.Информация("Генерация сборочной линии...");
	
	ВыводДополнительнойИнформации = ПараметрыКоманды.ЗначениеОпции("verbose");
	ФактИсполненияПайплайн.Вставить("ВыводДополнительнойИнформации", ВыводДополнительнойИнформации);

	ВыходнойФайл = ПараметрыКоманды.ЗначениеОпции("path");

	Pipeline = Символы.ПС + "$stages" + Символы.ПС;

	Pipeline = Pipeline + ТекстЭтапа(КаталогШаблонов, "common.yml");
	Pipeline = Pipeline + ТекстЭтапа(КаталогШаблонов, ".pre.yml");
	Pipeline = Pipeline + ТекстЭтапа(КаталогШаблонов, "verbose.yml");
	Pipeline = Pipeline + ТекстЭтапа(КаталогШаблонов, "schedules.yml");

	Pipeline = Pipeline + ТекстЭтапа(КаталогШаблонов, "build.yml");

	Pipeline = Pipeline + ТекстЭтапа(КаталогШаблонов, "syntax-check.yml");
	Pipeline = Pipeline + ТекстЭтапа(КаталогШаблонов, "tests.yml");

	Pipeline = Pipeline + ТекстЭтапа(КаталогШаблонов, "sonar.yml");
	Pipeline = Pipeline + ТекстЭтапа(КаталогШаблонов, "coverage.yml");
	Pipeline = Pipeline + ТекстЭтапа(КаталогШаблонов, "allure.yml");
	Pipeline = Pipeline + ТекстЭтапа(КаталогШаблонов, "pages.yml");
	Pipeline = Pipeline + ТекстЭтапа(КаталогШаблонов, "changelog.yml");

	// TODO
	СоставитьЗадачиРазвертывания(Pipeline, КаталогШаблонов);

	Pipeline = Pipeline + ТекстЭтапа(КаталогШаблонов, ".post.yml");

	СоставитьПланЭтапов(Pipeline);

	ФС.ОбеспечитьКаталог(КаталогСборки);
	Общие.СохранитьТекст(Pipeline, ВыходнойФайл);

	ТекстСообщения = СтрШаблон("Сборочная линия сохранена в %1", ВыходнойФайл);
	Лог.Информация(ТекстСообщения);

	Лог.Информация("Генерация сборочной линии завершена");

КонецПроцедуры // ВыполнитьКоманду

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Прочитать шаблон и добавить к общему тексту Pipeline
//
// Параметры:
//  Каталог  - Строка - Путь к каталогу шаблонов с шагами pipeline
//  ИмяФайла - Строка - Имя файла шаблона из каталога с шаблонами
//
// Возвращаемое значение:
//	Строка - Текст этапа
//
Функция ТекстЭтапа(Каталог, ИмяФайла)

	Если Не СоответствуетПлануИсполненияПайплайна(ИмяФайла) Тогда
		Возврат "";
	КонецЕсли;

	ПутьКФайлу = ОбъединитьПути(Каталог, ИмяФайла);

	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлу, КодировкаТекста.UTF8);
	ТекстФайла = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Возврат ТекстФайла;

КонецФункции

// Проверка доступен ли шаг для указанных переменных среды
//
// Параметры:
//  ИмяФайла - Строка - Имя файла шаблона из каталога с шаблонами  
//
// Возвращаемое значение:
//   Булево  - Проверка пройдена
//
Функция СоответствуетПлануИсполненияПайплайна(ИмяФайла)
	
	ПланИсполненияПайплайн = ТаблицаНастройкиШагов.Получить(ИмяФайла);
	
	Предустановленный                 = Общие.ПолучитьЗначениеСвойства(ПланИсполненияПайплайн, "PREDEFINED");
	ВыводДополнительнойИнформацииПлан = Общие.ПолучитьЗначениеСвойства(ПланИсполненияПайплайн, "VCI_VERBOSE");
	ИсточникиПайплайнПлан             = Общие.ПолучитьЗначениеСвойства(ПланИсполненияПайплайн, "CI_PIPELINE_SOURCE");
	// МеткаПлан                         = Общие.ПолучитьЗначениеСвойства(ПланИсполненияПайплайн, "CI_COMMIT_TAG");
	ЭтоДеплойПлан                     = Общие.ПолучитьЗначениеСвойства(ПланИсполненияПайплайн, "DEPLOY");

	ВыводДополнительнойИнформацииФакт = Общие.ПолучитьЗначениеСвойства(ФактИсполненияПайплайн, "ВыводДополнительнойИнформации");
	ИсточникПайплайнФакт              = Общие.ПолучитьЗначениеСвойства(ФактИсполненияПайплайн, "CI_PIPELINE_SOURCE");
	// МеткаФакт                         = Общие.ПолучитьЗначениеСвойства(ФактИсполненияПайплайн, "CI_COMMIT_TAG");
	ЭтоДеплойФакт                     = Общие.ПолучитьЗначениеСвойства(ФактИсполненияПайплайн, "DEPLOY");

	Если Предустановленный = Истина Тогда
		Возврат Истина;
	КонецЕсли;

	Если ВыводДополнительнойИнформацииПлан 
		И ВыводДополнительнойИнформацииФакт Тогда
		Возврат Истина;
	КонецЕсли;

	Если ЭтоДеплойФакт Тогда
		Если ЭтоДеплойПлан И ЭтоДеплойФакт Тогда
			Возврат Истина;
		КонецЕсли;
	Иначе
		ИсточникПайплайнНайден = ?(ИсточникиПайплайнПлан.Найти(ИсточникПайплайнФакт)=Неопределено, Ложь, Истина);
		Если ИсточникПайплайнНайден Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	// // TODO придумать как обрабатывать коммит тега, регулярное выражение вставить
	// Если МеткаПлан = "*" Тогда
	// 	Результат = Истина;
	// ИначеЕсли МеткаПлан = "" И МеткаФакт = "" Тогда
	// 	Результат = Истина;
	// КонецЕсли;

	Возврат Ложь; 

КонецФункции

// Составить план развертывания на все среды (prod, stage, test etc)
//
// Параметры:
//  Pipeline         - Строка - Инструкция для исполнения в gitlab pipeline 
//  КаталогШаблонов  - Строка - Путь к каталогу шаблонов с шагами pipeline  
//
Процедура СоставитьЗадачиРазвертывания(Pipeline, КаталогШаблонов)

	ШаблонЭтапа = ТекстЭтапа(КаталогШаблонов, "deployment.yml");

	ТекущийКаталог = ПараметрыПриложения.ТекущийКаталог();
	НайденныеСредыОкружения = НайтиФайлы(ТекущийКаталог, "env.*.json", Ложь);
	Для Каждого СредаОкружения Из НайденныеСредыОкружения Цикл

		Структура = Новый Структура;
		Структура.Вставить("job"    , СтрЗаменить(СредаОкружения.ИмяБезРасширения, "env.", ""));
		Структура.Вставить("stage"  , СтрШаблон("deploy.%1", СредаОкружения.Имя));
		Структура.Вставить("setting", СредаОкружения.Имя);

		Pipeline = Pipeline + СтроковыеФункции.ВставитьПараметрыВСтроку(ШаблонЭтапа, Структура);
	
	КонецЦикла;

КонецПроцедуры

// Составить план этапов и поместить его вначале
//
// Параметры:
//  Pipeline - Строка - Инструкция для исполнения в gitlab pipeline 
//
Процедура СоставитьПланЭтапов(Pipeline)
	
	Массив = Новый Массив;

	РегулярноеВыражение = Новый РегулярноеВыражение("stage:[\s]?[\s]?[\s]?(\S+)");
	РегулярноеВыражение.Многострочный = Истина;
	Совпадения = РегулярноеВыражение.НайтиСовпадения(Pipeline);

	Для Каждого Совпадение Из Совпадения Цикл
		НаименованиеЭтапа = Совпадение.Группы[1].Значение;
		Если СтрНачинаетсяС(НаименованиеЭтапа, ".") Тогда
			Продолжить;
		КонецЕсли;
		Если Массив.Найти(НаименованиеЭтапа) = Неопределено Тогда
			Массив.Добавить(НаименованиеЭтапа);
		КонецЕсли;
	КонецЦикла;

	СтрокаСШагами = СтрШаблон("stages:%1", Символы.ПС);
	Для Каждого ЭлементМассива Из Массив Цикл
		СтрокаСШагами = СтрокаСШагами + СтрШаблон("%1 - %2%3", " ", ЭлементМассива, Символы.ПС);
	КонецЦикла;

	Pipeline = СтрЗаменить(Pipeline, "$stages", СтрокаСШагами);

КонецПроцедуры

#КонецОбласти

КаталогШаблонов = ПараметрыПриложения.КаталогШаблоновCI();
КаталогСборки   = ПараметрыПриложения.КаталогСборки();

ФактИсполненияПайплайн = ПараметрыПриложения.ПолучитьПеременныеСреды();
ТаблицаНастройкиШагов  = ПараметрыПриложения.ПолучитьТаблицуНастройкиШагов();
