
#Использовать 1commands
#Использовать fs

#Область ОписаниеПеременных

Перем Лог;                      // Объект записи лога приложения

#КонецОбласти

// Сохранить текст в выходной файл
//
// Параметры:
//  Пайплайн      - Строка - Текст пайплайна
//  ВыходнойФайл  - Строка - Путь выходного файла куда сохраняем 
//
Процедура СохранитьТекст(Пайплайн, ВыходнойФайл) Экспорт

	ЗаписьТекста = Новый ЗаписьТекста(ВыходнойФайл, КодировкаТекста.UTF8);
	ЗаписьТекста.ЗаписатьСтроку(Пайплайн);
	ЗаписьТекста.Закрыть();

КонецПроцедуры

// Выполнить стороннюю команду
//	Обертка для выполнения какой нибудь команды в ОС, например vrunner compilecf
//
// Параметры:
//  ИмяКоманды        - Строка - Имя команды OC которую требуется выполнить
//  МассивПараметров  - Массив - Массив параметров выполнения команды ОС
//
Процедура ВыполнитьСтороннююКоманду(ИмяКоманды, МассивПараметров) Экспорт

	Лог.Вывести("%1 %2", УровниЛога.Информация, ИмяКоманды, СтрСоединить(МассивПараметров, " "));

	Команда = Новый Команда;
	Команда.УстановитьКоманду(ИмяКоманды);

	Команда.ДобавитьПараметры(МассивПараметров);

	Команда.ДобавитьЛогВыводаКоманды(Лог);
	Команда.ПоказыватьВыводНемедленно(Истина);

	Команда.УстановитьПравильныйКодВозврата(0);
	Команда.Исполнить();

КонецПроцедуры

// Получить свойства конфигурации из исходного кода
//	Пытаемся прочитать файл Configuration.xml и его свойства (Name, Vendor, Version etc)
//
// Параметры:
//  КаталогИсходогоКода  - Строка - относительный путь к каталогу исходного кода
//                                   по умолчанию каталог "./src/cf"
//
// Возвращаемое значение:
//   Структура   - Значения свойств конфигурации
//
Функция ПолучитьСвойстваКонфигурации(КаталогИсходогоКода = "./src/cf") Экспорт

	Свойства = Новый Структура("Name, Vendor, Version");

	ПутьКФайлу = ОбъединитьПути(КаталогИсходогоКода, "Configuration.xml");
	Если ФС.ФайлСуществует(ПутьКФайлу) Тогда
		Текст = ПрочитатьФайлВТексте(ПутьКФайлу);
		
		Значение = РазобратьСПомощьюРВ(Текст, "(?<=<Name>).*?(?=</Name>)");
		Свойства.Name = Значение;

		Значение = РазобратьСПомощьюРВ(Текст, "(?<=<Vendor>).*?(?=</Vendor>)");
		Свойства.Vendor = Значение;

		Значение = РазобратьСПомощьюРВ(Текст, "(?<=<Version>).*?(?=</Version>)");
		Свойства.Version = Значение;

	КонецЕсли;

	Возврат Свойства;

КонецФункции

// Прочитать файл в тексте
//
// Параметры:
//  ИмяФайла  - Строка - относительный путь к файлу который требуется прочитать как текст
//
// Возвращаемое значение:
//   Строка   - Прочитанный файл как текст
//
Функция ПрочитатьФайлВТексте(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() Тогда
		ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
		Текст = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		Возврат Текст;
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

// Разобрать с помощью регулярного выражения
//
// Параметры:
//  Текст  - Строка - Текст в котором требуется найти совпадения
//  ТекстРВ  - Строка - регулярное выражение которое нужно применить
//
// Возвращаемое значение:
//   Строка   - Найденное значение
//
Функция РазобратьСПомощьюРВ(Текст, ТекстРВ)

	РегулярноеВыражение = Новый РегулярноеВыражение(ТекстРВ);
	РегулярноеВыражение.Многострочный = Истина;
	Совпадения = РегулярноеВыражение.НайтиСовпадения(Текст);
	Если Совпадения.Количество() > 0 Тогда
		Возврат Совпадения[0].Значение;
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

Лог = ПараметрыПриложения.Лог();
