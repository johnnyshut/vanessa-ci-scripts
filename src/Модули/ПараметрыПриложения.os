
#Использовать fs
#Использовать logos
#Использовать tempfiles

#Область ОписаниеПеременных

Перем ЛогПриложения;                       // Объект       - объект записи лога приложения
Перем ОбщиеПараметры;                      // Структура    - общие параметры приложения
Перем ЭтоПриложениеEXE;                    // Булево       - Истина - выполняется скомпилированный скрипт
Перем ЭтоWindows;                          // Булево       - Истина - скрипт выполняется в среде Windows

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция - проверяет, что скрипт выполняется в среде Windows
//
// Возвращаемое значение:
//	Булево     - Истина - скрипт выполняется в среде Windows
//
Функция ЭтоWindows() Экспорт

	Если ЭтоWindows = Неопределено Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		ЭтоWindows = Найти(НРег(СистемнаяИнформация.ВерсияОС), "windows") > 0;
	КонецЕсли;

	Возврат ЭтоWindows;

КонецФункции // ЭтоWindows()

// Функция - проверяет, что выполняется скомпилированный скрипт
//
// Возвращаемое значение:
//	Булево     - Истина - выполняется скомпилированный скрипт
//
Функция ЭтоСборкаEXE() Экспорт
	
	Если ЭтоПриложениеEXE = Неопределено Тогда
		ЭтоПриложениеEXE = ВРег(Прав(ТекущийСценарий().Источник, 3)) = "EXE";
	КонецЕсли;

	Возврат ЭтоПриложениеEXE;

КонецФункции // ЭтоСборкаEXE()

// Функция - при необходтимости, определяет и возвращает текущий каталог приложения
//
// Возвращаемое значение:
//  Строка      - текущий каталог приложения
//
Функция КаталогПриложения() Экспорт
	ПутьККаталогу = ОбъединитьПути(ТекущийСценарий().Каталог, "..", "..");
	ФайлКаталога = Новый Файл(ПутьККаталогу);
	Возврат ФайлКаталога.ПолноеИмя;
КонецФункции // КаталогПриложения()

// Функция - при необходтимости, определяет и возвращает текущий каталог приложения источник
//
// Возвращаемое значение:
//  Строка      - текущий каталог приложения источник
//
Функция КаталогПриложенияИсточник() Экспорт
	ПутьККаталогу = ОбъединитьПути(ТекущийСценарий().Источник, "..", "..", "..");
	ФайлКаталога = Новый Файл(ПутьККаталогу);
	Возврат ФайлКаталога.ПолноеИмя;
КонецФункции // КаталогПриложенияИсточник()

// Функция - при необходимости, определяет и возвращает текущий каталог запуска
//
// Возвращаемое значение:
//   Строка  - текущий каталог запуска
//
Функция ТекущийКаталог() Экспорт
	ФайлКаталога = Новый Файл(ТекущийКаталог());
	Возврат ФайлКаталога.ПолноеИмя;
КонецФункции

// Функция - при необходимости, определяет и возвращает каталог шаблонов ci
//
// Возвращаемое значение:
//   Строка  - каталог шаблонов ci
//
Функция КаталогШаблоновCI() Экспорт
	ПутьККаталогу = ОбъединитьПути(КаталогПриложения(), "tools", "CI", "templates");
	ФайлКаталога = Новый Файл(ПутьККаталогу);
	Возврат ФайлКаталога.ПолноеИмя;
КонецФункции

// Функция - при необходимости, определяет и возвращает каталог сборки
//
// Возвращаемое значение:
//   Строка  - каталог сборки
//
Функция КаталогСборки() Экспорт
	ПутьККаталогу = ОбъединитьПути(ТекущийКаталог(), "build");
	ФайлКаталога = Новый Файл(ПутьККаталогу);
	Возврат ФайлКаталога.ПолноеИмя;
КонецФункции

// Собираем все параметры запуска pipeline в структуру
//
// Возвращаемое значение:
//   Соответствие - переменные среды запуска pipeline
//
Функция ПолучитьПеременныеСреды() Экспорт

	// TODO...
	Если Ложь Тогда
		УстановитьПеременнуюСреды("VCI_VERBOSE"       , "false");
		УстановитьПеременнуюСреды("CI_PIPELINE_SOURCE", "web");
		// УстановитьПеременнуюСреды("CI_COMMIT_TAG"     , "1.0.0.1");
		УстановитьПеременнуюСреды("DEPLOY"            , "0");
	КонецЕсли;
	// ...убрать 
	
	Соответствие = Новый Соответствие;

	// push, web, schedule, api, external, chat, webide, 
	// merge_request_event, external_pull_request_event, 
	// parent_pipeline, trigger, or pipeline
	Соответствие.Вставить("CI_PIPELINE_SOURCE", ПолучитьПеременнуюСреды("CI_PIPELINE_SOURCE"));
    
	// // "1.0.0.1", "2.2.1.5" etc
	// Соответствие.Вставить("CI_COMMIT_TAG"     , ПолучитьПеременнуюСреды("CI_COMMIT_TAG"));
    
	// "1" - запускаем или "0" - по умолчанию
	Соответствие.Вставить("DEPLOY"            , ?(ПолучитьПеременнуюСреды("DEPLOY")="1", Истина, Ложь));
	
	Возврат Соответствие;

КонецФункции

// Функция - при необходимости, возвращает таблицу с настройками для шагов pipeline
//
// Возвращаемое значение:
//   Таблица - настройки для формирования шагов pipeline
//
Функция ПолучитьТаблицуНастройкиШагов() Экспорт
	ПутьКФайлу = ОбъединитьПути(КаталогПриложения(), "fixtures", "allow.values.predefined.cicd.var.json");
	Соответствие = ПрочитатьJSONИзФайла(ПутьКФайлу, Истина); // TODO перенести в "Общие.os"

	Возврат Соответствие;
КонецФункции

// Возвращает путь к модулю gitsync
//
// Возвращаемое значение:
//   Строка - относительный путь до gitsync
//
Функция ВернутьПутьGitSync() Экспорт
	Возврат "oscript_modules\gitsync\src\cmd\gitsync.os";
КонецФункции

// Возвращает путь к модулю vrunner
//
// Возвращаемое значение:
//   Строка - относительный путь до vanessa-runner
//
Функция ВернутьПутьVrunner() Экспорт 
	Возврат "oscript_modules\vanessa-runner\src\main.os";
КонецФункции

// Возвращает путь к обработке vanessa-automation
//
// Возвращаемое значение:
//   Строка - относительный путь до обработки vanessa-automation.epf
//
Функция ВернутьПутьVAutomation() Экспорт
	Возврат "oscript_modules\vanessa-automation\vanessa-automation.epf";
КонецФункции

// Функция - возвращает текущий уровень лога приложения
//
// Возвращаемое значение:
//  Строка      - текущий уровень лога приложения
//
Функция УровеньЛога() Экспорт

	Возврат ЛогПриложения.Уровень();

КонецФункции // УровеньЛога()

// Процедура - включает режим отладки
//
// Параметры:
//	РежимОтладки    - Булево    - Истина - включить режим отладки
//
Процедура УстановитьРежимОтладки(Знач РежимОтладки) Экспорт
	
	Если РежимОтладки Тогда
		Лог().УстановитьУровень(УровниЛога.Отладка);
	КонецЕсли;
	
КонецПроцедуры // УстановитьРежимОтладки()

// Функция - возвращает общие параметры приложения
//
// Возвращаемое значение:
//  Структура      - общие параметры приложения
//
Функция Параметры() Экспорт

	Возврат ОбщиеПараметры;

КонецФункции // Параметры()

// Функция - при необходимости, инициализирует и возвращает объект управления логированием
//
// Возвращаемое значение:
//  Объект      - объект управления логированием
//
Функция Лог() Экспорт
	
	Если ЛогПриложения = Неопределено Тогда
		ЛогПриложения = Логирование.ПолучитьЛог(ИмяЛогаПриложения());
	КонецЕсли;

	Возврат ЛогПриложения;

КонецФункции // Лог()

// Функция - возвращает имя лога приложения
//
// Возвращаемое значение:
//  Строка      - имя лога приложения
//
Функция ИмяЛогаПриложения() Экспорт

	Возврат "oscript.app." + ИмяПриложения();

КонецФункции // ИмяЛогаПриложения()

// Функция - возвращает имя приложения
//
// Возвращаемое значение:
//  Строка      - имя приложения
//
Функция ИмяПриложения() Экспорт

	Возврат "vanessa-ci-scripts";

КонецФункции // ИмяПриложения()

// Функция - возвращает версию приложения
//
// Возвращаемое значение:
//  Строка      - версия приложения
//
Функция Версия() Экспорт
	
	Версия = "1.1.1"; // присвоение "Версия = " важно для проверки Сонара
	Возврат Версия;
	
КонецФункции // Версия()

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Процедура Инициализация(Знач Параметры = Неопределено)

	ОбщиеПараметры = Новый Структура();

	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		Для Каждого ТекПараметр Из Параметры Цикл
			ОбщиеПараметры.Добавить(ТекПараметр.Ключ, ТекПараметр.Значение);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // Инициализация()

// TODO перенести в "Общие.os"
//
// Считывает значение из JSON-файла. JSON-текст должен быть корректным.
//
// Параметры:
//  ПутьКФайлу     - Строка - JSON-файл.
//  ВСоответствие  - Булево - Если установлено Истина, чтение объекта JSON будет выполнено в Соответствие. Если установлено Ложь, объекты будут считываться в объект типа Структура. Значение по умолчанию: Ложь.
//
// Возвращаемое значение:
//   Соответствие/Структура - Значения параметров
//
Функция ПрочитатьJSONИзФайла(ПутьКФайлу, ВСоответствие) Экспорт

	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл(ПутьКФайлу);
	Параметры = ПрочитатьJSON(Чтение, ВСоответствие);
	Чтение.Закрыть();

	Возврат Параметры;

КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

Инициализация();
