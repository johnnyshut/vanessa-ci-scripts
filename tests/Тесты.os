#Использовать 1commands
#Использовать asserts
#Использовать fs
#Использовать yaml

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ВсеТесты = Новый Массив;
	
	// vci init
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоКопируется_ФайлИнициализации");
	
	// vci generate
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСоздается_Простой_ФайлГенерации");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСоздается_Простой_ФайлГенерации_ВУказанномКаталоге");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСоздается_ГрафикВыполнения_ФайлГенерации");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСоздается_Сборка_ФайлГенерации");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСоздается_Развертка_ФайлГенерации");
	// ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСоздается_Тэг_ФайлГенерации");
	
	// vci run <имя-скрипта>
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЗапускСкрипта_ПриветМир");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЗапускСкрипта_ПриветМир_СПараметром");
	
	Возврат ВсеТесты;
	
КонецФункции

#Область СлужебныеПроцедурыИФункции

Функция СоздатьВременныйКаталог()
	УИД = Строка(Новый УникальныйИдентификатор());
	КаталогФайлов = ОбъединитьПути(КаталогВременныхФайлов(), УИД);
	СоздатьКаталог(КаталогФайлов);
	Возврат КаталогФайлов;
КонецФункции

Процедура УдалитьВременныйКаталог(КаталогФайлов)
	УдалитьФайлы(КаталогФайлов, "*.*");
	УдалитьФайлы(КаталогФайлов);
КонецПроцедуры

#КонецОбласти

#Область МетодИнициализация

Процедура ТестДолжен_ПроверитьЧтоКопируется_ФайлИнициализации() Экспорт
	
	КаталогВременныхФайлов = СоздатьВременныйКаталог();
	
	Команда = Новый Команда();
	Команда.УстановитьРабочийКаталог(КаталогВременныхФайлов);
	Путь = ОбъединитьПути(ТекущийКаталог(), "src", "main.os");
	Команда.УстановитьКоманду("oscript");
	Команда.ДобавитьПараметр(Путь);
	Команда.ДобавитьПараметр("init");
	КодВозврата = Команда.Исполнить();
	Ожидаем.Что(КодВозврата, "Ожидаем, что код возврата команды = 0").Равно(0);
	
	МассивФайлов = НайтиФайлы(КаталогВременныхФайлов, ".gitlab-ci.yml");
	Ожидаем.Что(МассивФайлов.Количество(), "Ожидаем, что создан файл '.gitlab-ci.yml'").Равно(1);
	
	МассивФайлов = НайтиФайлы(КаталогВременныхФайлов, "tools\scripts\install-oscript-local.bat");
	Ожидаем.Что(МассивФайлов.Количество(), "Ожидаем, что создан файл 'tools\scripts\install-oscript-local.bat'").Равно(1);
	
	УдалитьВременныйКаталог(КаталогВременныхФайлов);
	
КонецПроцедуры

#КонецОбласти

#Область МетодГенерация

Процедура ТестДолжен_ПроверитьЧтоСоздается_Простой_ФайлГенерации() Экспорт
	
	КаталогВременныхФайлов = СоздатьВременныйКаталог();
	
	Команда = Новый Команда();
	Команда.УстановитьРабочийКаталог(КаталогВременныхФайлов);
	Путь = ОбъединитьПути(ТекущийКаталог(), "src", "main.os");
	Команда.УстановитьКоманду("oscript");
	Команда.ДобавитьПараметр(Путь);
	Команда.ДобавитьПараметр("generate");
	КодВозврата = Команда.Исполнить();
	Ожидаем.Что(КодВозврата, "Ожидаем, что код возврата команды = 0").Равно(0);
	
	ПутьККаталогуСборки = ОбъединитьПути(КаталогВременныхФайлов, "build");
	МассивФайлов = НайтиФайлы(ПутьККаталогуСборки, "generate-config.yml");
	Ожидаем.Что(МассивФайлов.Количество(), "Ожидаем, что создан файл 'generate-config.yml'").Равно(1);
	
	Для каждого Файл Из МассивФайлов Цикл
		
		ЧтениеТекста = Новый ЧтениеТекста(Файл.ПолноеИмя, КодировкаТекста.UTF8);
		ТекстФайла = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();

		ПарсерYAML = Новый ПарсерYAML;
		РезультатЧтения = ПарсерYAML.ПрочитатьYaml(ТекстФайла);

		МассивШагов = РезультатЧтения.Получить("stages");
		Ожидаем.Что(МассивШагов, "Ожиидаем, что шагов в 'stages' не найдено").Равно(Неопределено);

	КонецЦикла;
	
	УдалитьВременныйКаталог(КаталогВременныхФайлов);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСоздается_Простой_ФайлГенерации_ВУказанномКаталоге() Экспорт
	
	КаталогВременныхФайлов = СоздатьВременныйКаталог();
	
	ПроизвольныйКаталог = "build";
	ПроизвольноеИмяФайла = "test_generate-config.yml";
	ПроизвольныйАртефакт = ОбъединитьПути(ПроизвольныйКаталог, ПроизвольноеИмяФайла);
	
	Команда = Новый Команда();
	Команда.УстановитьРабочийКаталог(КаталогВременныхФайлов);
	Путь = ОбъединитьПути(ТекущийКаталог(), "src", "main.os");
	Команда.УстановитьКоманду("oscript");
	Команда.ДобавитьПараметр(Путь);
	Команда.ДобавитьПараметр("generate");
	Команда.ДобавитьПараметр("-p " + ПроизвольныйАртефакт);
	КодВозврата = Команда.Исполнить();
	Ожидаем.Что(КодВозврата, "Ожидаем, что код возврата команды = 0").Равно(0);
	
	ПутьККаталогуСборки = ОбъединитьПути(КаталогВременныхФайлов, ПроизвольныйКаталог);
	МассивФайлов = НайтиФайлы(ПутьККаталогуСборки, ПроизвольноеИмяФайла);
	Ожидаем.Что(МассивФайлов.Количество(), "Ожидаем, что создан файл 'generate-config.yml' с произвольным именем").Равно(1);
	
	Для каждого Файл Из МассивФайлов Цикл
		
		ЧтениеТекста = Новый ЧтениеТекста(Файл.ПолноеИмя, КодировкаТекста.UTF8);
		ТекстФайла = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();

		ПарсерYAML = Новый ПарсерYAML;
		РезультатЧтения = ПарсерYAML.ПрочитатьYaml(ТекстФайла);

		МассивШагов = РезультатЧтения.Получить("stages");
		Ожидаем.Что(МассивШагов, "Ожиидаем, что шагов в 'stages' не найдено").Равно(Неопределено);

	КонецЦикла;

	УдалитьВременныйКаталог(КаталогВременныхФайлов);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСоздается_ГрафикВыполнения_ФайлГенерации() Экспорт
	
	УстановитьПеременнуюСреды("CI_PIPELINE_SOURCE", "schedule");
	
	КаталогВременныхФайлов = СоздатьВременныйКаталог();
	
	Команда = Новый Команда();
	Команда.УстановитьРабочийКаталог(КаталогВременныхФайлов);
	Путь = ОбъединитьПути(ТекущийКаталог(), "src", "main.os");
	Команда.УстановитьКоманду("oscript");
	Команда.ДобавитьПараметр(Путь);
	Команда.ДобавитьПараметр("generate");
	КодВозврата = Команда.Исполнить();
	Ожидаем.Что(КодВозврата, "Ожидаем, что код возврата команды = 0").Равно(0);
	
	ПутьККаталогуСборки = ОбъединитьПути(КаталогВременныхФайлов, "build");
	МассивФайлов = НайтиФайлы(ПутьККаталогуСборки, "generate-config.yml");
	Для Каждого Файл Из МассивФайлов Цикл
		
		ЧтениеТекста = Новый ЧтениеТекста(Файл.ПолноеИмя, КодировкаТекста.UTF8);
		ТекстФайла = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		
		ПарсерYAML = Новый ПарсерYAML;
		РезультатЧтения = ПарсерYAML.ПрочитатьYaml(ТекстФайла);
		
		МассивШагов = РезультатЧтения.Получить("stages");
		Ожидаем.Что(МассивШагов.Количество(), "Ожиидаем, что шагов в 'stages' > 0").Больше(0);

		Для Каждого ЭлементЧтения Из РезультатЧтения Цикл

			Ожидаем.Что(СтрНайти(ЭлементЧтения.Ключ, "("), "Ожидаем, что в именах job символ '(' не найден").Равно(0);
			Ожидаем.Что(СтрНайти(ЭлементЧтения.Ключ, ")"), "Ожидаем, что в именах job символ ')' не найден").Равно(0);
		КонецЦикла;
		
	КонецЦикла;
	
	УдалитьВременныйКаталог(КаталогВременныхФайлов);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСоздается_Сборка_ФайлГенерации() Экспорт
	
	УстановитьПеременнуюСреды("CI_PIPELINE_SOURCE", "web");
	
	КаталогВременныхФайлов = СоздатьВременныйКаталог();
	
	Команда = Новый Команда();
	Команда.УстановитьРабочийКаталог(КаталогВременныхФайлов);
	Путь = ОбъединитьПути(ТекущийКаталог(), "src", "main.os");
	Команда.УстановитьКоманду("oscript");
	Команда.ДобавитьПараметр(Путь);
	Команда.ДобавитьПараметр("generate");
	КодВозврата = Команда.Исполнить();
	Ожидаем.Что(КодВозврата, "Ожидаем, что код возврата команды = 0").Равно(0);
	
	ПутьККаталогуСборки = ОбъединитьПути(КаталогВременныхФайлов, "build");
	МассивФайлов = НайтиФайлы(ПутьККаталогуСборки, "generate-config.yml");
	Для Каждого Файл Из МассивФайлов Цикл
		
		ЧтениеТекста = Новый ЧтениеТекста(Файл.ПолноеИмя, КодировкаТекста.UTF8);
		ТекстФайла = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		
		ПарсерYAML = Новый ПарсерYAML;
		РезультатЧтения = ПарсерYAML.ПрочитатьYaml(ТекстФайла);
		
		МассивШагов = РезультатЧтения.Получить("stages");
		Ожидаем.Что(МассивШагов.Количество(), "Ожиидаем, что шагов в 'stages' > 0").Больше(0);

		Для Каждого ЭлементЧтения Из РезультатЧтения Цикл
			Ожидаем.Что(СтрНайти(ЭлементЧтения.Ключ, "("), "Ожидаем, что в именах job символ '(' не найден").Равно(0);
			Ожидаем.Что(СтрНайти(ЭлементЧтения.Ключ, ")"), "Ожидаем, что в именах job символ ')' не найден").Равно(0);
		КонецЦикла;
		
	КонецЦикла;
	
	УдалитьВременныйКаталог(КаталогВременныхФайлов);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСоздается_Развертка_ФайлГенерации() Экспорт
	
	УстановитьПеременнуюСреды("DEPLOY", "1");
	
	КаталогВременныхФайлов = СоздатьВременныйКаталог();
	ФС.КопироватьСодержимоеКаталога(".\fixtures\", КаталогВременныхФайлов);
	
	Команда = Новый Команда();
	Команда.УстановитьРабочийКаталог(КаталогВременныхФайлов);
	Путь = ОбъединитьПути(ТекущийКаталог(), "src", "main.os");
	Команда.УстановитьКоманду("oscript");
	Команда.ДобавитьПараметр(Путь);
	Команда.ДобавитьПараметр("generate");
	КодВозврата = Команда.Исполнить();
	Ожидаем.Что(КодВозврата, "Ожидаем, что код возврата команды = 0").Равно(0);
	
	ПутьККаталогуСборки = ОбъединитьПути(КаталогВременныхФайлов, "build");
	МассивФайлов = НайтиФайлы(ПутьККаталогуСборки, "generate-config.yml");
	Для Каждого Файл Из МассивФайлов Цикл
		
		ЧтениеТекста = Новый ЧтениеТекста(Файл.ПолноеИмя, КодировкаТекста.UTF8);
		ТекстФайла = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		
		ПарсерYAML = Новый ПарсерYAML;
		РезультатЧтения = ПарсерYAML.ПрочитатьYaml(ТекстФайла);
		
		МассивШагов = РезультатЧтения.Получить("stages");
		Ожидаем.Что(МассивШагов.Количество(), "Ожиидаем, что шагов в 'stages' > 0").Больше(0);

		Для Каждого ЭлементЧтения Из РезультатЧтения Цикл
			Ожидаем.Что(СтрНайти(ЭлементЧтения.Ключ, "("), "Ожидаем, что в именах job символ '(' не найден").Равно(0);
			Ожидаем.Что(СтрНайти(ЭлементЧтения.Ключ, ")"), "Ожидаем, что в именах job символ ')' не найден").Равно(0);
		КонецЦикла;
		
	КонецЦикла;
	
	УдалитьВременныйКаталог(КаталогВременныхФайлов);
	
КонецПроцедуры

// Процедура ТестДолжен_ПроверитьЧтоСоздается_Тэг_ФайлГенерации() Экспорт
	
// 	УстановитьПеременнуюСреды("CI_COMMIT_TAG", "1.0.0.1");
	
// 	КаталогВременныхФайлов = СоздатьВременныйКаталог();
	
// 	Команда = Новый Команда();
// 	Команда.УстановитьРабочийКаталог(КаталогВременныхФайлов);
// 	Путь = ОбъединитьПути(ТекущийКаталог(), "src", "main.os");
// 	Команда.УстановитьКоманду("oscript");
// 	Команда.ДобавитьПараметр(Путь);
// 	Команда.ДобавитьПараметр("generate");
// 	КодВозврата = Команда.Исполнить();
// 	Ожидаем.Что(КодВозврата, "Ожидаем, что код возврата команды = 0").Равно(0);
	
// 	ПутьККаталогуСборки = ОбъединитьПути(КаталогВременныхФайлов, "build");
// 	МассивФайлов = НайтиФайлы(ПутьККаталогуСборки, "generate-config.yml");
// 	Для Каждого Файл Из МассивФайлов Цикл
		
// 		ЧтениеТекста = Новый ЧтениеТекста(Файл.ПолноеИмя, КодировкаТекста.UTF8);
// 		ТекстФайла = ЧтениеТекста.Прочитать();
// 		ЧтениеТекста.Закрыть();
		
// 		ПарсерYAML = Новый ПарсерYAML;
// 		РезультатЧтения = ПарсерYAML.ПрочитатьYaml(ТекстФайла);
		
// 		МассивШагов = РезультатЧтения.Получить("stages");
// 		Ожидаем.Что(МассивШагов.Количество(), "Ожиидаем, что шагов в 'stages' > 0").Больше(0);

// 		Для Каждого ЭлементЧтения Из РезультатЧтения Цикл
// 			Ожидаем.Что(СтрНайти(ЭлементЧтения.Ключ, "("), "Ожидаем, что в именах job символ '(' не найден").Равно(0);
// 			Ожидаем.Что(СтрНайти(ЭлементЧтения.Ключ, ")"), "Ожидаем, что в именах job символ ')' не найден").Равно(0);
// 		КонецЦикла;
		
// 	КонецЦикла;
	
// 	УдалитьВременныйКаталог(КаталогВременныхФайлов);
	
// КонецПроцедуры

#КонецОбласти

#Область МетодЗапуск

Процедура ТестДолжен_ПроверитьЗапускСкрипта_ПриветМир() Экспорт
	
	Команда = Новый Команда();
	Путь = ОбъединитьПути(ТекущийКаталог(), "src", "main.os");
	Команда.УстановитьКоманду("oscript");
	Команда.ДобавитьПараметр(Путь);
	Команда.ДобавитьПараметр("run");
	Команда.ДобавитьПараметр("hello-world");
	КодВозврата = Команда.Исполнить();
	Ожидаем.Что(КодВозврата, "Ожидаем, что код возврата команды = 0").Равно(0);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЗапускСкрипта_ПриветМир_СПараметром() Экспорт
	
	Команда = Новый Команда();
	Путь = ОбъединитьПути(ТекущийКаталог(), "src", "main.os");
	Команда.УстановитьКоманду("oscript");
	Команда.ДобавитьПараметр(Путь);
	Команда.ДобавитьПараметр("run");
	Команда.ДобавитьПараметр("hello-world-args");
	Команда.ДобавитьПараметр("fixtures\env.dev.json");
	КодВозврата = Команда.Исполнить();
	Ожидаем.Что(КодВозврата, "Ожидаем, что код возврата команды = 0").Равно(0);
	
КонецПроцедуры

#КонецОбласти
